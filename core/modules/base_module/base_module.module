<?php

namespace core\modules;

class base_module extends \core\moduleAbstract {

	/** TODO Testing
	 * Module Info Must be present for use
	 * @return array
	 ***/
	public static function __Info__() {
		$info = array(
		  'Name' => 'base',
		  'Desc' => 'test module',

			// path to use @ ?a= , Optional uf no path is set it will just be used at module's files basename
		  'path' => array('base/'),// TODO Extend to array for functions?

		  'permissions' => array ( // Permissions this module has

		  )
		);

		return $info;
	}

	/** TODO
	 * How should installs be handled
	 ***/
	public static function __Install__() {

	}

	public function __construct() {

	}


	/**
	 * to string function overloads calls to class as toString, should return output of string Data
	 *
	 * @return string
	 ***/
	public function __toString() {
		return "";
	}


	/**
	 * Overload function for calls when the method does not exist
	 *
	 * @param $name
	 * @param $args
	 *
	 * @throws Exception
	 *
	 * @returns optional value if set
	 ***/
	public function __call($name, $args) {
		$methodPrefix = substr($name, 0, 3);
		$methodProperty = strtolower($name[3]). substr($name, 4);

		switch ($methodPrefix) {
			case "get":
				if(isset($this->$methodProperty)) {
					return $this->$methodProperty;
				} else {
					return null;
				}


				break;
			case "set":
				if(count($args) == 1) {
					$this->$methodProperty = $args[0];

				} else {
					throw new \Exception("Default Setter only supports one argument!");

				}

				break;

			default:
				throw new \Exception( "Magic method cannot handle prefix: " . $methodPrefix );
		}

	}

}