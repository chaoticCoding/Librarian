<?php

namespace core\Guardian;

/**
 * Class css
 * @package core\Guardian
 */
class js extends \core\coreInc
{
    /** TODO, Testing
     * Collects binary file and returns it to browser
     *
     * @param string    $path
     * @param bool      $allowResume          | if flag is true Allows HTTP 206
     * @param bool      $allowBrowserCache    | if flag is true allows browser to cache file
     * @param bool      $sendAsAttachment     | if flag is true sends type attachment flag (streaming/inline, triggers browser to attempt to open vs save file)
     **/
    public static function retrieve ($path, $allowResume = true, $allowBrowserCache = false, $sendAsAttachment = true)
    {
        //when downloading, use a chunk by chunk streaming method.  This
        //allows us to download really big files without timing out.
        $pathParts = \pathinfo($path);

        if(!isset($fileName) || !$fileName|| trim($fileName) == "") {
            $fileName = $pathParts['filename'];
        }

        $downloadFileName = str_replace(' ', '_', $fileName);

        // adds extention if its needed/missing
        if (!preg_match('/\.' . $pathParts['extension'] . '$/i', $downloadFileName)) {
            $downloadFileName .= '.' . $pathParts['extension'];
        }

        // Verify the file really exists
        /** @var string $filePath */
        if (\file_exists($filePath)) {
            //header("file-found: " . "true");
            //header("file-path: " . $filePath);
            //ob_clean();

            // Disable output compression.
            @apache_setenv('no-gzip', 1);
            @ini_set('zlib.output_compression', 'Off');

            try {
                $mime_type = self::getMimeTypeFromMagic($filePath);
            }catch (\Throwable $e){

            }catch (\Exception $e){

            }

            //Mime type from magic failed, load mime type from file extention
            if($mime_type == null || trim($mime_type) == "" ){
                $mime_type = self::getMimeTypeFromExtention($pathParts['extension']);
            }
            header("file-mimetype: " . $mime_type);

            // Grabs size of file to be transfered
            $fileByteSize = filesize($filePath);
            header("file-bytesize: " . $fileByteSize);

            //$sendBuffSize = 1 * 1024;
            $sendBuffSize = ini_get("output_buffering"); // Grabs output buffer size no point to send anything bigger
            //header("ob-size: " . $sendBuffSize);

            // only read te smallet block possible
            $sendBuffSize = ($fileByteSize < $sendBuffSize) ? $fileByteSize : $sendBuffSize;

            // Sets init offsets
            $offset = 0;
            $length = $fileByteSize;

            // Checks for client offset Data
            if ($allowResume && isset($_SERVER['HTTP_RANGE'])) {

                header("http-range: " . $_SERVER['HTTP_RANGE']);
                // Parse HTPP_Range Data to get the bit offsets from the client
                \preg_match('/bytes=(\d+)?-(\d+)?/', $_SERVER['HTTP_RANGE'], $matches);

                $requestStart = \intval($matches[1]); // accepts the offect prosition from the browser for where to start sending file

                // sets offsets and expected lengths
                if (count($matches) > 2) {
                    $requestEnd = (($matches[2]) ? \intval($matches[2]) : $fileByteSize-1);
                } else {
                    $requestEnd = $fileByteSize-1;
                }

                $offset += $requestStart;

                $length = $requestEnd - $requestStart;

                if (($requestStart > 0) || ($requestEnd < $fileByteSize)) {
                    // Updates the header to Partial Content
                    header('HTTP/1.1 206 Partial Content');
                    // sends client back range of data being sent

                    header(sprintf("Content-Range: bytes %d-%d/%d", $requestStart, $requestEnd+1, $fileByteSize-1));
                }
            }

            if($allowResume) {
                // Tells the browser that we allow ranges
                header("Accept-Ranges: bytes");
            }

            // Size of content being sent
            header(sprintf("Content-Length: %d", $length));

            // Defines MIME type & file Data
            header(sprintf("Content-Type: %s", $mime_type));

            // Domain of file
            header("Pragma: public");

            if($allowBrowserCache !== true) {
                // Supresses cache as much as possible
                header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
                header("Expires: -1");
            }

            header(sprintf("Content-Disposition: %s; filename=\"%s\"", $sendAsAttachment ? "attachment" : "inline", $downloadFileName));

            // Context needed for Amazon S3 Streaming ( does nothing with out AWS SDK )
            // https://docs.aws.amazon.com/aws-sdk-php/v3/guide/service/s3-stream-wrapper.html
            $context = stream_context_create([
                 's3' => ['seekable' => true]
            ]);

            // sends header and disables output buffering
            //ob_end_flush ();

            // Opens file handle
            if ($fileHandle = fopen($filePath, 'rb', false, $context)) {

                //sets fileStream to blocking mode, Holds script while waiting on resource to become available
                //stream_set_blocking($fileHandle, true);

                fseek($fileHandle, $offset); // sets file read position based on $offset, needed to allow 206 resumes

                while (!feof($fileHandle)) {
                    set_time_limit(0); //resets timer for PHP execution, preventing timeouts from loading.

                    // process next heep
                    echo fread($fileHandle, $sendBuffSize);

                    // Forces clear of the FS Buffer
                    flush();

                    // Forces clear of the Output Buffer, and triggers an immediate send to client
                    ob_flush();

                    // checks to make sure browser connection is still active, if not kill the upload
                    if (connection_status() != CONNECTION_NORMAL) {
                        $connectionStatus = connection_status();
                        switch ($connectionStatus) {
                            case CONNECTION_ABORTED:
                                break;

                            case CONNECTION_TIMEOUT :
                                break;

                        }

                        @fclose($fileHandle);
                        break;
                    }
                }

                // close file handle
                $status = @fclose($fileHandle);
            } else {
                // file couldn't be opened, but does exist....
                header("HTTP/1.0 500 Internal Server Error");
                header("file-path: " . $filePath);
                //exit;
            }

            //restarts the PHP output buffer
            /*if (version_compare(PHP_VERSION, '5.4.0', '>=')) {
                ob_start(null, 0, PHP_OUTPUT_HANDLER_STDFLAGS ^
                PHP_OUTPUT_HANDLER_REMOVABLE);
            } else {
                ob_start(null, 0, false);
            }*/
        } else { // file does not exist
            // file does not exist
            header("HTTP/1.0 404 Not Found");
            header("file-found: " . "false");
            header("file-path: " . $filePath);
            //exit;
        }
    }


    /**
     * Get mine_type from magic, Requires apache/php to know the file type and the file to be structured correctly
     *
     * @param string $path : path to file
     *
     * @return string $mime_type : from magic
     ***/
    public static function getMimeTypeFromMagic($path){
        // Content Mime infomation

        try {
            $finfo = @finfo_open(FILEINFO_MIME_TYPE);
            $mime_type = @finfo_file($finfo, $path);
            @finfo_close($finfo);
        }catch (\Throwable $e){

        }catch (\Exception $e){

        }

        return $mime_type;
    }

    /**
     * Returns mine type from known list of extentions
     *
     * @param $extension
     *
     * @return (String) $mime_type defaults to octet-stream
     ***/
    public static function getMimeTypeFromExtention($extension = null)
    {
        $return_contentType = "application/octet-stream";

        /* Just add any required MIME type if you are going to download something not listed here.*/
        // to find and use specific content type, check out this IANA page : http://www.iana.org/assignments/media-types/media-types.xhtml
        $mime_types = array("323" => "text/h323",
            "acx" => "application/internet-property-stream",
            "ai" => "application/postscript",
            "aif" => "audio/x-aiff",
            "aifc" => "audio/x-aiff",
            "aiff" => "audio/x-aiff",
            "asf" => "video/x-ms-asf",
            "asr" => "video/x-ms-asf",
            "asx" => "video/x-ms-asf",
            "au" => "audio/basic",
            "avi" => "video/x-msvideo",
            "axs" => "application/olescript",
            "bas" => "text/plain",
            "bcpio" => "application/x-bcpio",
            "bin" => "application/octet-stream",
            "bmp" => "image/bmp",
            "c" => "text/plain",
            "cat" => "application/vnd.ms-pkiseccat",
            "cdf" => "application/x-cdf",
            "cer" => "application/x-x509-ca-cert",
            "class" => "application/octet-stream",
            "clp" => "application/x-msclip",
            "cmx" => "image/x-cmx",
            "cod" => "image/cis-cod",
            "cpio" => "application/x-cpio",
            "crd" => "application/x-mscardfile",
            "crl" => "application/pkix-crl",
            "crt" => "application/x-x509-ca-cert",
            "csh" => "application/x-csh",
            "css" => "text/css",
            "dcr" => "application/x-director",
            "der" => "application/x-x509-ca-cert",
            "dir" => "application/x-director",
            "dll" => "application/x-msdownload",
            "dms" => "application/octet-stream",
            "doc" => "application/msword",
            "dot" => "application/msword",
            "dvi" => "application/x-dvi",
            "dxr" => "application/x-director",
            "eps" => "application/postscript",
            "etx" => "text/x-setext",
            "evy" => "application/envoy",
            "exe" => "application/octet-stream",
            "fif" => "application/fractals",
            "flr" => "x-world/x-vrml",
            "gif" => "image/gif",
            "gtar" => "application/x-gtar",
            "gz" => "application/x-gzip",
            "h" => "text/plain",
            "hdf" => "application/x-hdf",
            "hlp" => "application/winhlp",
            "hqx" => "application/mac-binhex40",
            "hta" => "application/hta",
            "htc" => "text/x-component",
            "htm" => "text/html",
            "html" => "text/html",
            "htt" => "text/webviewhtml",
            "ico" => "image/x-icon",
            "ief" => "image/ief",
            "iii" => "application/x-iphone",
            "ins" => "application/x-internet-signup",
            "isp" => "application/x-internet-signup",
            "jfif" => "image/pipeg",
            "jpe" => "image/jpeg",
            "jpeg" => "image/jpeg",
            "jpg" => "image/jpeg",
            "js" => "application/x-javascript",
            "latex" => "application/x-latex",
            "lha" => "application/octet-stream",
            "lsf" => "video/x-la-asf",
            "lsx" => "video/x-la-asf",
            "lzh" => "application/octet-stream",
            "m13" => "application/x-msmediaview",
            "m14" => "application/x-msmediaview",
            "m3u" => "audio/x-mpegurl",
            "man" => "application/x-troff-man",
            "mdb" => "application/x-msaccess",
            "me" => "application/x-troff-me",
            "mht" => "message/rfc822",
            "mhtml" => "message/rfc822",
            "mid" => "audio/mid",
            "mny" => "application/x-msmoney",
            "mov" => "video/quicktime",
            "movie" => "video/x-sgi-movie",
            "mp2" => "video/mpeg",
            "mp3" => "audio/mp3",
            "mpa" => "video/mpeg",
            "mpe" => "video/mpeg",
            "mpeg" => "video/mpeg",
            "mpg" => "video/mpeg",
            "mp4" => "video/mp4",
            "mpp" => "application/vnd.ms-project",
            "mpv2" => "video/mpeg",
            "ms" => "application/x-troff-ms",
            "mvb" => "application/x-msmediaview",
            "nws" => "message/rfc822",
            "oda" => "application/oda",
            "p10" => "application/pkcs10",
            "p12" => "application/x-pkcs12",
            "p7b" => "application/x-pkcs7-certificates",
            "p7c" => "application/x-pkcs7-mime",
            "p7m" => "application/x-pkcs7-mime",
            "p7r" => "application/x-pkcs7-certreqresp",
            "p7s" => "application/x-pkcs7-signature",
            "pbm" => "image/x-portable-bitmap",
            "pdf" => "application/pdf",
            "pfx" => "application/x-pkcs12",
            "pgm" => "image/x-portable-graymap",
            "pko" => "application/ynd.ms-pkipko",
            "pma" => "application/x-perfmon",
            "pmc" => "application/x-perfmon",
            "pml" => "application/x-perfmon",
            "pmr" => "application/x-perfmon",
            "pmw" => "application/x-perfmon",
            "pnm" => "image/x-portable-anymap",
            "pot" => "application/vnd.ms-powerpoint",
            "ppm" => "image/x-portable-pixmap",
            "pps" => "application/vnd.ms-powerpoint",
            "ppt" => "application/vnd.ms-powerpoint",
            "prf" => "application/pics-rules",
            "ps" => "application/postscript",
            "pub" => "application/x-mspublisher",
            "qt" => "video/quicktime",
            "ra" => "audio/x-pn-realaudio",
            "ram" => "audio/x-pn-realaudio",
            "ras" => "image/x-cmu-raster",
            "rgb" => "image/x-rgb",
            "rmi" => "audio/mid",
            "roff" => "application/x-troff",
            "rtf" => "application/rtf",
            "rtx" => "text/richtext",
            "scd" => "application/x-msschedule",
            "sct" => "text/scriptlet",
            "setpay" => "application/set-payment-initiation",
            "setreg" => "application/set-registration-initiation",
            "sh" => "application/x-sh",
            "shar" => "application/x-shar",
            "sit" => "application/x-stuffit",
            "snd" => "audio/basic",
            "spc" => "application/x-pkcs7-certificates",
            "spl" => "application/futuresplash",
            "src" => "application/x-wais-source",
            "sst" => "application/vnd.ms-pkicertstore",
            "stl" => "application/vnd.ms-pkistl",
            "stm" => "text/html",
            "svg" => "image/svg+xml",
            "sv4cpio" => "application/x-sv4cpio",
            "sv4crc" => "application/x-sv4crc",
            "t" => "application/x-troff",
            "tar" => "application/x-tar",
            "tcl" => "application/x-tcl",
            "tex" => "application/x-tex",
            "texi" => "application/x-texinfo",
            "texinfo" => "application/x-texinfo",
            "tgz" => "application/x-compressed",
            "tif" => "image/tiff",
            "tiff" => "image/tiff",
            "tr" => "application/x-troff",
            "trm" => "application/x-msterminal",
            "tsv" => "text/tab-separated-values",
            "txt" => "text/plain",
            "uls" => "text/iuls",
            "ustar" => "application/x-ustar",
            "vcf" => "text/x-vcard",
            "vrml" => "x-world/x-vrml",
            "wav" => "audio/x-wav",
            "wcm" => "application/vnd.ms-works",
            "wdb" => "application/vnd.ms-works",
            "wks" => "application/vnd.ms-works",
            "wmf" => "application/x-msmetafile",
            "wps" => "application/vnd.ms-works",
            "wri" => "application/x-mswrite",
            "wrl" => "x-world/x-vrml",
            "wrz" => "x-world/x-vrml",
            "xaf" => "x-world/x-vrml",
            "xbm" => "image/x-xbitmap",
            "xla" => "application/vnd.ms-excel",
            "xlc" => "application/vnd.ms-excel",
            "xlm" => "application/vnd.ms-excel",
            "xls" => "application/vnd.ms-excel",
            "xlt" => "application/vnd.ms-excel",
            "xlw" => "application/vnd.ms-excel",
            "xof" => "x-world/x-vrml",
            "xpm" => "image/x-xpixmap",
            "xwd" => "image/x-xwindowdump",
            "z" => "application/x-compress",
            "rar" => "application/x-rar-compressed",
            "zip" => "application/zip");

        if (array_key_exists($extension, $mime_types)) {
            $return_contentType = $mime_types[$extension];
        }

        return $return_contentType;
    }

}